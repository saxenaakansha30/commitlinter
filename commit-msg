#!/usr/bin/env python3
#
# A hook script to check the commit log message.
# Called by "git commit" with one argument, the name of the file
# that has the commit message.  The hook should exit with non-zero
# status after issuing an appropriate message if it wants to stop the
# commit.  The hook is allowed to edit the commit message file.
#
import sys
from pattern.text.en.modality import imperative
from pattern.text.en import parse, Sentence, conjugate
from termcolor import colored

# Helper functions.
def under_char_limit(msg):
  if len(msg) > 50:
    return False

  return True

def ends_at_period(msg, error_queue):
  if msg[-1] == '.':
    error_queue.append("Commit message should not end with a trailing dot.")
    return msg[:-1]

  return msg

def is_capitalized(msg, error_queue):
  if msg[0].islower():
    error_queue.append("Commit message should be capitalized.")
    return msg.capitalize()

  return msg


def is_body_separated(msg, error_queue):
  if (len(msg) > 2) & (msg[1] != ''):
    error_queue.append("Separate subject from body with a blank line")
    return False

  return True

def is_imperative(msg, error_queue):
  if imperative(Sentence(parse(msg))):
    return True

  error_queue.append("Commit message should be imperative.")
  return False

def make_imperative(msg):
  # Get verb.
  tokenized_msg = msg.split()
  verb = tokenized_msg[0]

  # Verb in imperative mood === Verb in second person, indicative, present tense
  fixed_verb = conjugate(verb, mood="indicative", person=2, tense="present")

  if verb.istitle():
    fixed_verb = fixed_verb.title()
  elif verb.isupper():
    fixed_verb = fixed_verb.upper()
  elif verb.islower():
    fixed_verb = fixed_verb.lower()

  tokenized_msg[0] = fixed_verb
  return " ".join(tokenized_msg)

def main():
  # Read passed message through argument.
  messageFile = sys.argv[1]
  file = open(messageFile, 'r')
  message = file.read().split("\n")
  subject = message[0]
  body = message[1:]

  error_queue = []

  subject = is_capitalized(subject, error_queue)
  subject = ends_at_period(subject, error_queue)
  # is_body_separated(msg, error_queue)

  if not is_imperative(subject, error_queue):
    subject = make_imperative(subject)

  if error_queue:
    print(f"{colored('Commit linter analysis: ', 'cyan')}\n")
    for error in error_queue:
      print(f"{colored(error, 'red')}")
    print('\n')

  if not under_char_limit(subject):
    raise ValueError("Shorten your commit")

  if not error_queue:
    print(f"{colored('Good commit message. :)', 'green')}\n")
  else:
    print(f"{colored('Message fixed to: ' + subject, 'green')}\n")

  with open(messageFile, "w") as file:
    file.writelines([subject + "\n", *body])

main()
